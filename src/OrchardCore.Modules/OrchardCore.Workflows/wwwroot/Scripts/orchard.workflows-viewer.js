/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

///<reference path='../Lib/jquery/typings.d.ts' />
///<reference path='../Lib/jsplumb/typings.d.ts' />
///<reference path='./workflow-models.ts' />
var WorkflowCanvas =
/** @class */
function () {
  function WorkflowCanvas(container, workflowType) {
    var _this = this;

    this.container = container;
    this.workflowType = workflowType;
    this.minCanvasHeight = 400;

    this.getActivityElements = function () {
      return $(_this.container).find('.activity');
    };

    this.getDefaults = function () {
      return {
        Anchor: "Continuous",
        DragOptions: {
          cursor: 'pointer',
          zIndex: 2000
        },
        EndpointStyles: [{
          fillStyle: '#225588'
        }],
        Endpoints: [["Dot", {
          radius: 7
        }], ["Blank"]],
        ConnectionOverlays: [["Arrow", {
          width: 12,
          length: 12,
          location: -5
        }]],
        ConnectorZIndex: 5
      };
    };

    this.createJsPlumbInstance = function () {
      return jsPlumb.getInstance({
        DragOptions: {
          cursor: 'pointer',
          zIndex: 2000
        },
        ConnectionOverlays: [['Arrow', {
          location: 1,
          visible: true,
          width: 11,
          length: 11
        }], ['Label', {
          location: 0.5,
          id: 'label',
          cssClass: 'connection-label'
        }]],
        Container: _this.container
      });
    };

    this.getEndpointColor = function (activity) {
      return activity.isBlocking || activity.isStart ? '#7ab02c' : activity.isEvent ? '#3a8acd' : '#7ab02c';
    };

    this.getSourceEndpointOptions = function (activity, outcome) {
      // The definition of source endpoints.
      var paintColor = _this.getEndpointColor(activity);

      return {
        endpoint: 'Dot',
        anchor: 'Continuous',
        paintStyle: {
          stroke: paintColor,
          fill: paintColor,
          radius: 7,
          strokeWidth: 1
        },
        isSource: true,
        connector: ['Flowchart', {
          stub: [40, 60],
          gap: 0,
          cornerRadius: 5,
          alwaysRespectStubs: true
        }],
        connectorStyle: {
          strokeWidth: 2,
          stroke: '#999999',
          joinstyle: 'round',
          outlineStroke: 'white',
          outlineWidth: 2
        },
        hoverPaintStyle: {
          fill: '#216477',
          stroke: '#216477'
        },
        connectorHoverStyle: {
          strokeWidth: 3,
          stroke: '#216477',
          outlineWidth: 5,
          outlineStroke: 'white'
        },
        connectorOverlays: [['Label', {
          location: [3, -1.5],
          cssClass: 'endpointSourceLabel'
        }]],
        dragOptions: {},
        uuid: activity.id + "-" + outcome.name,
        parameters: {
          outcome: outcome
        }
      };
    };

    this.getActivity = function (id, activities) {
      if (activities === void 0) {
        activities = null;
      }

      if (!activities) {
        activities = this.workflowType.activities;
      }

      return $.grep(activities, function (x) {
        return x.id === id;
      })[0];
    };

    this.updateConnections = function (plumber) {
      var workflowId = _this.workflowType.id; // Connect activities.

      for (var _i = 0, _a = _this.workflowType.transitions; _i < _a.length; _i++) {
        var transitionModel = _a[_i];
        var sourceEndpointUuid = transitionModel.sourceActivityId + "-" + transitionModel.sourceOutcomeName;
        var sourceEndpoint = plumber.getEndpoint(sourceEndpointUuid);
        var destinationElementId = "activity-" + workflowId + "-" + transitionModel.destinationActivityId;
        plumber.connect({
          source: sourceEndpoint,
          target: destinationElementId
        });
      }
    };

    this.updateCanvasHeight = function () {
      var $container = $(this.container); // Get the activity element with the highest Y coordinate.

      var $activityElements = $container.find(".activity");
      var currentElementTop = 0;
      var currentActivityHeight = 0;

      for (var _i = 0, _a = $activityElements.toArray(); _i < _a.length; _i++) {
        var activityElement = _a[_i];
        var $activityElement = $(activityElement);
        var top_1 = $activityElement.position().top;

        if (top_1 > currentElementTop) {
          currentElementTop = top_1;
          currentActivityHeight = $activityElement.height();
        }
      }

      var newCanvasHeight = currentElementTop + currentActivityHeight;
      var elementBottom = currentElementTop + currentActivityHeight;
      var stretchValue = 100;

      if (newCanvasHeight - elementBottom <= stretchValue) {
        newCanvasHeight += stretchValue;
      }

      $container.height(Math.max(this.minCanvasHeight, newCanvasHeight));
    };
  }

  return WorkflowCanvas;
}();
///<reference path='../Lib/jquery/typings.d.ts' />
///<reference path='../Lib/jsplumb/typings.d.ts' />
///<reference path='./workflow-models.ts' />
///<reference path='./workflow-canvas.ts' />
var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var WorkflowViewer =
/** @class */
function (_super) {
  __extends(WorkflowViewer, _super);

  function WorkflowViewer(container, workflowType) {
    var _this = _super.call(this, container, workflowType) || this;

    _this.container = container;
    _this.workflowType = workflowType;

    _this.getEndpointColor = function (activity) {
      return activity.isBlocking ? '#7ab02c' : activity.isEvent ? '#3a8acd' : '#7ab02c';
    };

    var self = _this;
    jsPlumb.ready(function () {
      jsPlumb.importDefaults(_this.getDefaults());

      var plumber = _this.createJsPlumbInstance(); // Listen for new connections.


      plumber.bind('connection', function (connInfo, originalEvent) {
        var connection = connInfo.connection;
        var outcome = connection.getParameters().outcome;
        var label = connection.getOverlay('label');
        label.setLabel(outcome.displayName);
      });

      var activityElements = _this.getActivityElements();

      var areEqualOutcomes = function areEqualOutcomes(outcomes1, outcomes2) {
        if (outcomes1.length != outcomes2.length) {
          return false;
        }

        for (var i = 0; i < outcomes1.length; i++) {
          var outcome1 = outcomes1[i];
          var outcome2 = outcomes2[i];

          if (outcome1.name != outcome2.displayName || outcome1.displayName != outcome2.displayName) {
            return false;
          }
        }

        return true;
      }; // Suspend drawing and initialize.


      plumber.batch(function () {
        var workflowId = _this.workflowType.id;
        activityElements.each(function (index, activityElement) {
          var $activityElement = $(activityElement);
          var activityId = $activityElement.data('activity-id');

          var activity = _this.getActivity(activityId); // Configure the activity as a target.


          plumber.makeTarget(activityElement, {
            dropOptions: {
              hoverClass: 'hover'
            },
            anchor: 'Continuous',
            endpoint: ['Blank', {
              radius: 8
            }]
          }); // Add source endpoints.

          for (var _i = 0, _a = activity.outcomes; _i < _a.length; _i++) {
            var outcome = _a[_i];

            var sourceEndpointOptions = _this.getSourceEndpointOptions(activity, outcome);

            plumber.addEndpoint(activityElement, {
              connectorOverlays: [['Label', {
                label: outcome.displayName,
                cssClass: 'connection-label'
              }]]
            }, sourceEndpointOptions);
          }
        }); // Connect activities.

        _this.updateConnections(plumber); // Re-query the activity elements.


        activityElements = _this.getActivityElements(); // Make all activity elements visible.

        activityElements.show();

        _this.updateCanvasHeight();
      });
      _this.jsPlumbInstance = plumber;
    });
    return _this;
  }

  return WorkflowViewer;
}(WorkflowCanvas);

$.fn.workflowViewer = function () {
  this.each(function (index, element) {
    var $element = $(element);
    var workflowType = $element.data('workflow-type');
    $element.data('workflowViewer', new WorkflowViewer(element, workflowType));
  });
  return this;
};

$(document).ready(function () {
  var workflowViewer = $('.workflow-canvas').workflowViewer().data('workflowViewer');
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndvcmtmbG93LWNhbnZhcy50cyIsIndvcmtmbG93LXZpZXdlci50cyIsIndvcmtmbG93LXZpZXdlci5qcyJdLCJuYW1lcyI6WyJXb3JrZmxvd0NhbnZhcyIsImNvbnRhaW5lciIsIndvcmtmbG93VHlwZSIsIl90aGlzIiwibWluQ2FudmFzSGVpZ2h0IiwiZ2V0QWN0aXZpdHlFbGVtZW50cyIsIiQiLCJmaW5kIiwiZ2V0RGVmYXVsdHMiLCJBbmNob3IiLCJEcmFnT3B0aW9ucyIsImN1cnNvciIsInpJbmRleCIsIkVuZHBvaW50U3R5bGVzIiwiZmlsbFN0eWxlIiwiRW5kcG9pbnRzIiwicmFkaXVzIiwiQ29ubmVjdGlvbk92ZXJsYXlzIiwid2lkdGgiLCJsZW5ndGgiLCJsb2NhdGlvbiIsIkNvbm5lY3RvclpJbmRleCIsImNyZWF0ZUpzUGx1bWJJbnN0YW5jZSIsImpzUGx1bWIiLCJnZXRJbnN0YW5jZSIsInZpc2libGUiLCJpZCIsImNzc0NsYXNzIiwiQ29udGFpbmVyIiwiZ2V0RW5kcG9pbnRDb2xvciIsImFjdGl2aXR5IiwiaXNCbG9ja2luZyIsImlzU3RhcnQiLCJpc0V2ZW50IiwiZ2V0U291cmNlRW5kcG9pbnRPcHRpb25zIiwib3V0Y29tZSIsInBhaW50Q29sb3IiLCJlbmRwb2ludCIsImFuY2hvciIsInBhaW50U3R5bGUiLCJzdHJva2UiLCJmaWxsIiwic3Ryb2tlV2lkdGgiLCJpc1NvdXJjZSIsImNvbm5lY3RvciIsInN0dWIiLCJnYXAiLCJjb3JuZXJSYWRpdXMiLCJhbHdheXNSZXNwZWN0U3R1YnMiLCJjb25uZWN0b3JTdHlsZSIsImpvaW5zdHlsZSIsIm91dGxpbmVTdHJva2UiLCJvdXRsaW5lV2lkdGgiLCJob3ZlclBhaW50U3R5bGUiLCJjb25uZWN0b3JIb3ZlclN0eWxlIiwiY29ubmVjdG9yT3ZlcmxheXMiLCJkcmFnT3B0aW9ucyIsInV1aWQiLCJuYW1lIiwicGFyYW1ldGVycyIsImdldEFjdGl2aXR5IiwiYWN0aXZpdGllcyIsImdyZXAiLCJ4IiwidXBkYXRlQ29ubmVjdGlvbnMiLCJwbHVtYmVyIiwid29ya2Zsb3dJZCIsIl9pIiwiX2EiLCJ0cmFuc2l0aW9ucyIsInRyYW5zaXRpb25Nb2RlbCIsInNvdXJjZUVuZHBvaW50VXVpZCIsInNvdXJjZUFjdGl2aXR5SWQiLCJzb3VyY2VPdXRjb21lTmFtZSIsInNvdXJjZUVuZHBvaW50IiwiZ2V0RW5kcG9pbnQiLCJkZXN0aW5hdGlvbkVsZW1lbnRJZCIsImRlc3RpbmF0aW9uQWN0aXZpdHlJZCIsImNvbm5lY3QiLCJzb3VyY2UiLCJ0YXJnZXQiLCJ1cGRhdGVDYW52YXNIZWlnaHQiLCIkY29udGFpbmVyIiwiJGFjdGl2aXR5RWxlbWVudHMiLCJjdXJyZW50RWxlbWVudFRvcCIsImN1cnJlbnRBY3Rpdml0eUhlaWdodCIsInRvQXJyYXkiLCJhY3Rpdml0eUVsZW1lbnQiLCIkYWN0aXZpdHlFbGVtZW50IiwidG9wXzEiLCJwb3NpdGlvbiIsInRvcCIsImhlaWdodCIsIm5ld0NhbnZhc0hlaWdodCIsImVsZW1lbnRCb3R0b20iLCJzdHJldGNoVmFsdWUiLCJNYXRoIiwibWF4IiwiX19leHRlbmRzIiwiZXh0ZW5kU3RhdGljcyIsImQiLCJiIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsInAiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJjcmVhdGUiLCJXb3JrZmxvd1ZpZXdlciIsIl9zdXBlciIsImNhbGwiLCJzZWxmIiwicmVhZHkiLCJpbXBvcnREZWZhdWx0cyIsImJpbmQiLCJjb25uSW5mbyIsIm9yaWdpbmFsRXZlbnQiLCJjb25uZWN0aW9uIiwiZ2V0UGFyYW1ldGVycyIsImxhYmVsIiwiZ2V0T3ZlcmxheSIsInNldExhYmVsIiwiZGlzcGxheU5hbWUiLCJhY3Rpdml0eUVsZW1lbnRzIiwiYXJlRXF1YWxPdXRjb21lcyIsIm91dGNvbWVzMSIsIm91dGNvbWVzMiIsImkiLCJvdXRjb21lMSIsIm91dGNvbWUyIiwiYmF0Y2giLCJlYWNoIiwiaW5kZXgiLCJhY3Rpdml0eUlkIiwiZGF0YSIsIm1ha2VUYXJnZXQiLCJkcm9wT3B0aW9ucyIsImhvdmVyQ2xhc3MiLCJvdXRjb21lcyIsInNvdXJjZUVuZHBvaW50T3B0aW9ucyIsImFkZEVuZHBvaW50Iiwic2hvdyIsImpzUGx1bWJJbnN0YW5jZSIsImZuIiwid29ya2Zsb3dWaWV3ZXIiLCJlbGVtZW50IiwiJGVsZW1lbnQiLCJkb2N1bWVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFFQSxJQUFBQSxjQUFBO0FBQUE7QUFBQSxZQUFBO0FBR0ksV0FBQUEsY0FBQSxDQUFzQkMsU0FBdEIsRUFBd0RDLFlBQXhELEVBQTRGO0FBQTVGLFFBQUFDLEtBQUEsR0FBQSxJQUFBOztBQUFzQixTQUFBRixTQUFBLEdBQUFBLFNBQUE7QUFBa0MsU0FBQUMsWUFBQSxHQUFBQSxZQUFBO0FBRmhELFNBQUFFLGVBQUEsR0FBMEIsR0FBMUI7O0FBS0UsU0FBQUMsbUJBQUEsR0FBc0IsWUFBQTtBQUM1QixhQUFPQyxDQUFDLENBQUNILEtBQUksQ0FBQ0YsU0FBTixDQUFELENBQWtCTSxJQUFsQixDQUF1QixXQUF2QixDQUFQO0FBQ0gsS0FGUzs7QUFJQSxTQUFBQyxXQUFBLEdBQWMsWUFBQTtBQUNwQixhQUFPO0FBQ0hDLFFBQUFBLE1BQU0sRUFBRSxZQURMO0FBRUhDLFFBQUFBLFdBQVcsRUFBRTtBQUFFQyxVQUFBQSxNQUFNLEVBQUUsU0FBVjtBQUFxQkMsVUFBQUEsTUFBTSxFQUFFO0FBQTdCLFNBRlY7QUFHSEMsUUFBQUEsY0FBYyxFQUFFLENBQUM7QUFBRUMsVUFBQUEsU0FBUyxFQUFFO0FBQWIsU0FBRCxDQUhiO0FBSUhDLFFBQUFBLFNBQVMsRUFBRSxDQUFDLENBQUMsS0FBRCxFQUFRO0FBQUVDLFVBQUFBLE1BQU0sRUFBRTtBQUFWLFNBQVIsQ0FBRCxFQUF5QixDQUFDLE9BQUQsQ0FBekIsQ0FKUjtBQUtIQyxRQUFBQSxrQkFBa0IsRUFBRSxDQUNoQixD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UUFBRCxDQUFELENBQVluQyxLQUFaLENBQWtCLFlBQUE7QUFDZCxNQUFNZ0MsY0FBYyxHQUFtQjlJLENBQUMsQ0FBQyxrQkFBRCxDQUFELENBQXNCOEksY0FBdEIsR0FBdUNWLElBQXZDLENBQTRDLGdCQUE1QyxDQUF2QztBQUNILENBRkQiLCJmaWxlIjoib3JjaGFyZC53b3JrZmxvd3Mtdmlld2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vPHJlZmVyZW5jZSBwYXRoPScuLi9MaWIvanF1ZXJ5L3R5cGluZ3MuZC50cycgLz5cclxuLy8vPHJlZmVyZW5jZSBwYXRoPScuLi9MaWIvanNwbHVtYi90eXBpbmdzLmQudHMnIC8+XHJcbi8vLzxyZWZlcmVuY2UgcGF0aD0nLi93b3JrZmxvdy1tb2RlbHMudHMnIC8+XHJcblxyXG5hYnN0cmFjdCBjbGFzcyBXb3JrZmxvd0NhbnZhcyB7XHJcbiAgICBwcml2YXRlIG1pbkNhbnZhc0hlaWdodDogbnVtYmVyID0gNDAwO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBjb250YWluZXI6IEhUTUxFbGVtZW50LCBwcm90ZWN0ZWQgd29ya2Zsb3dUeXBlOiBXb3JrZmxvd3MuV29ya2Zsb3dUeXBlKSB7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGdldEFjdGl2aXR5RWxlbWVudHMgPSAoKTogSlF1ZXJ5ID0+IHtcclxuICAgICAgICByZXR1cm4gJCh0aGlzLmNvbnRhaW5lcikuZmluZCgnLmFjdGl2aXR5Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGdldERlZmF1bHRzID0gKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIEFuY2hvcjogXCJDb250aW51b3VzXCIsXHJcbiAgICAgICAgICAgIERyYWdPcHRpb25zOiB7IGN1cnNvcjogJ3BvaW50ZXInLCB6SW5kZXg6IDIwMDAgfSxcclxuICAgICAgICAgICAgRW5kcG9pbnRTdHlsZXM6IFt7IGZpbGxTdHlsZTogJyMyMjU1ODgnIH1dLFxyXG4gICAgICAgICAgICBFbmRwb2ludHM6IFtbXCJEb3RcIiwgeyByYWRpdXM6IDcgfV0sIFtcIkJsYW5rXCJdXSxcclxuICAgICAgICAgICAgQ29ubmVjdGlvbk92ZXJsYXlzOiBbXHJcbiAgICAgICAgICAgICAgICBbXCJBcnJvd1wiLCB7IHdpZHRoOiAxMiwgbGVuZ3RoOiAxMiwgbG9jYXRpb246IC01IH1dLFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBDb25uZWN0b3JaSW5kZXg6IDVcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHByb3RlY3RlZCBjcmVhdGVKc1BsdW1iSW5zdGFuY2UgPSAoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGpzUGx1bWIuZ2V0SW5zdGFuY2Uoe1xyXG4gICAgICAgICAgICBEcmFnT3B0aW9uczogeyBjdXJzb3I6ICdwb2ludGVyJywgekluZGV4OiAyMDAwIH0sXHJcbiAgICAgICAgICAgIENvbm5lY3Rpb25PdmVybGF5czogW1xyXG4gICAgICAgICAgICAgICAgWydBcnJvdycsIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogMSxcclxuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMSxcclxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IDExXHJcbiAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgIFsnTGFiZWwnLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IDAuNSxcclxuICAgICAgICAgICAgICAgICAgICBpZDogJ2xhYmVsJyxcclxuICAgICAgICAgICAgICAgICAgICBjc3NDbGFzczogJ2Nvbm5lY3Rpb24tbGFiZWwnXHJcbiAgICAgICAgICAgICAgICB9XVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBDb250YWluZXI6IHRoaXMuY29udGFpbmVyXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHByb3RlY3RlZCBnZXRFbmRwb2ludENvbG9yID0gKGFjdGl2aXR5OiBXb3JrZmxvd3MuQWN0aXZpdHkpID0+IHtcclxuICAgICAgICByZXR1cm4gYWN0aXZpdHkuaXNCbG9ja2luZyB8fCBhY3Rpdml0eS5pc1N0YXJ0ID8gJyM3YWIwMmMnIDogYWN0aXZpdHkuaXNFdmVudCA/ICcjM2E4YWNkJyA6ICcjN2FiMDJjJztcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgZ2V0U291cmNlRW5kcG9pbnRPcHRpb25zID0gKGFjdGl2aXR5OiBXb3JrZmxvd3MuQWN0aXZpdHksIG91dGNvbWU6IFdvcmtmbG93cy5PdXRjb21lKTogRW5kcG9pbnRPcHRpb25zID0+IHtcclxuICAgICAgICAvLyBUaGUgZGVmaW5pdGlvbiBvZiBzb3VyY2UgZW5kcG9pbnRzLlxyXG4gICAgICAgIGNvbnN0IHBhaW50Q29sb3IgPSB0aGlzLmdldEVuZHBvaW50Q29sb3IoYWN0aXZpdHkpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGVuZHBvaW50OiAnRG90JyxcclxuICAgICAgICAgICAgYW5jaG9yOiAnQ29udGludW91cycsXHJcbiAgICAgICAgICAgIHBhaW50U3R5bGU6IHtcclxuICAgICAgICAgICAgICAgIHN0cm9rZTogcGFpbnRDb2xvcixcclxuICAgICAgICAgICAgICAgIGZpbGw6IHBhaW50Q29sb3IsXHJcbiAgICAgICAgICAgICAgICByYWRpdXM6IDcsXHJcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogMVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpc1NvdXJjZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29ubmVjdG9yOiBbJ0Zsb3djaGFydCcsIHsgc3R1YjogWzQwLCA2MF0sIGdhcDogMCwgY29ybmVyUmFkaXVzOiA1LCBhbHdheXNSZXNwZWN0U3R1YnM6IHRydWUgfV0sXHJcbiAgICAgICAgICAgIGNvbm5lY3RvclN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogMixcclxuICAgICAgICAgICAgICAgIHN0cm9rZTogJyM5OTk5OTknLFxyXG4gICAgICAgICAgICAgICAgam9pbnN0eWxlOiAncm91bmQnLFxyXG4gICAgICAgICAgICAgICAgb3V0bGluZVN0cm9rZTogJ3doaXRlJyxcclxuICAgICAgICAgICAgICAgIG91dGxpbmVXaWR0aDogMlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBob3ZlclBhaW50U3R5bGU6IHtcclxuICAgICAgICAgICAgICAgIGZpbGw6ICcjMjE2NDc3JyxcclxuICAgICAgICAgICAgICAgIHN0cm9rZTogJyMyMTY0NzcnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbm5lY3RvckhvdmVyU3R5bGU6IHtcclxuICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAzLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlOiAnIzIxNjQ3NycsXHJcbiAgICAgICAgICAgICAgICBvdXRsaW5lV2lkdGg6IDUsXHJcbiAgICAgICAgICAgICAgICBvdXRsaW5lU3Ryb2tlOiAnd2hpdGUnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbm5lY3Rvck92ZXJsYXlzOiBbWydMYWJlbCcsIHsgbG9jYXRpb246IFszLCAtMS41XSwgY3NzQ2xhc3M6ICdlbmRwb2ludFNvdXJjZUxhYmVsJyB9XV0sXHJcbiAgICAgICAgICAgIGRyYWdPcHRpb25zOiB7fSxcclxuICAgICAgICAgICAgdXVpZDogYCR7YWN0aXZpdHkuaWR9LSR7b3V0Y29tZS5uYW1lfWAsXHJcbiAgICAgICAgICAgIHBhcmFtZXRlcnM6IHtcclxuICAgICAgICAgICAgICAgIG91dGNvbWU6IG91dGNvbWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgIHByb3RlY3RlZCBnZXRBY3Rpdml0eSA9IGZ1bmN0aW9uIChpZDogc3RyaW5nLCBhY3Rpdml0aWVzOiBBcnJheTxXb3JrZmxvd3MuQWN0aXZpdHk+ID0gbnVsbCk6IFdvcmtmbG93cy5BY3Rpdml0eSB7XHJcbiAgICAgICAgaWYgKCFhY3Rpdml0aWVzKSB7XHJcbiAgICAgICAgICAgIGFjdGl2aXRpZXMgPSB0aGlzLndvcmtmbG93VHlwZS5hY3Rpdml0aWVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gJC5ncmVwKGFjdGl2aXRpZXMsICh4OiBXb3JrZmxvd3MuQWN0aXZpdHkpID0+IHguaWQgPT09IGlkKVswXTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgdXBkYXRlQ29ubmVjdGlvbnMgPSAocGx1bWJlcjoganNQbHVtYkluc3RhbmNlKSA9PiB7XHJcbiAgICAgICAgdmFyIHdvcmtmbG93SWQ6IG51bWJlciA9IHRoaXMud29ya2Zsb3dUeXBlLmlkO1xyXG5cclxuICAgICAgICAvLyBDb25uZWN0IGFjdGl2aXRpZXMuXHJcbiAgICAgICAgZm9yIChsZXQgdHJhbnNpdGlvbk1vZGVsIG9mIHRoaXMud29ya2Zsb3dUeXBlLnRyYW5zaXRpb25zKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZUVuZHBvaW50VXVpZDogc3RyaW5nID0gYCR7dHJhbnNpdGlvbk1vZGVsLnNvdXJjZUFjdGl2aXR5SWR9LSR7dHJhbnNpdGlvbk1vZGVsLnNvdXJjZU91dGNvbWVOYW1lfWA7XHJcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZUVuZHBvaW50OiBFbmRwb2ludCA9IHBsdW1iZXIuZ2V0RW5kcG9pbnQoc291cmNlRW5kcG9pbnRVdWlkKTtcclxuICAgICAgICAgICAgY29uc3QgZGVzdGluYXRpb25FbGVtZW50SWQ6IHN0cmluZyA9IGBhY3Rpdml0eS0ke3dvcmtmbG93SWR9LSR7dHJhbnNpdGlvbk1vZGVsLmRlc3RpbmF0aW9uQWN0aXZpdHlJZH1gO1xyXG5cclxuICAgICAgICAgICAgcGx1bWJlci5jb25uZWN0KHtcclxuICAgICAgICAgICAgICAgIHNvdXJjZTogc291cmNlRW5kcG9pbnQsXHJcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGRlc3RpbmF0aW9uRWxlbWVudElkXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgdXBkYXRlQ2FudmFzSGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0ICRjb250YWluZXIgPSAkKHRoaXMuY29udGFpbmVyKTtcclxuXHJcbiAgICAgICAgLy8gR2V0IHRoZSBhY3Rpdml0eSBlbGVtZW50IHdpdGggdGhlIGhpZ2hlc3QgWSBjb29yZGluYXRlLlxyXG4gICAgICAgIGNvbnN0ICRhY3Rpdml0eUVsZW1lbnRzID0gJGNvbnRhaW5lci5maW5kKFwiLmFjdGl2aXR5XCIpO1xyXG4gICAgICAgIGxldCBjdXJyZW50RWxlbWVudFRvcCA9IDA7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRBY3Rpdml0eUhlaWdodCA9IDA7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGFjdGl2aXR5RWxlbWVudCBvZiAkYWN0aXZpdHlFbGVtZW50cy50b0FycmF5KCkpIHtcclxuICAgICAgICAgICAgY29uc3QgJGFjdGl2aXR5RWxlbWVudCA9ICQoYWN0aXZpdHlFbGVtZW50KTtcclxuICAgICAgICAgICAgY29uc3QgdG9wID0gJGFjdGl2aXR5RWxlbWVudC5wb3NpdGlvbigpLnRvcDtcclxuXHJcbiAgICAgICAgICAgIGlmICh0b3AgPiBjdXJyZW50RWxlbWVudFRvcCkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudEVsZW1lbnRUb3AgPSB0b3A7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50QWN0aXZpdHlIZWlnaHQgPSAkYWN0aXZpdHlFbGVtZW50LmhlaWdodCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgbmV3Q2FudmFzSGVpZ2h0ID0gY3VycmVudEVsZW1lbnRUb3AgKyBjdXJyZW50QWN0aXZpdHlIZWlnaHQ7XHJcbiAgICAgICAgY29uc3QgZWxlbWVudEJvdHRvbSA9IGN1cnJlbnRFbGVtZW50VG9wICsgY3VycmVudEFjdGl2aXR5SGVpZ2h0O1xyXG4gICAgICAgIGNvbnN0IHN0cmV0Y2hWYWx1ZSA9IDEwMDtcclxuXHJcbiAgICAgICAgaWYgKG5ld0NhbnZhc0hlaWdodCAtIGVsZW1lbnRCb3R0b20gPD0gc3RyZXRjaFZhbHVlKSB7XHJcbiAgICAgICAgICAgIG5ld0NhbnZhc0hlaWdodCArPSBzdHJldGNoVmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkY29udGFpbmVyLmhlaWdodChNYXRoLm1heCh0aGlzLm1pbkNhbnZhc0hlaWdodCwgbmV3Q2FudmFzSGVpZ2h0KSk7XHJcbiAgICB9O1xyXG59XHJcbiIsIi8vLzxyZWZlcmVuY2UgcGF0aD0nLi4vTGliL2pxdWVyeS90eXBpbmdzLmQudHMnIC8+XHJcbi8vLzxyZWZlcmVuY2UgcGF0aD0nLi4vTGliL2pzcGx1bWIvdHlwaW5ncy5kLnRzJyAvPlxyXG4vLy88cmVmZXJlbmNlIHBhdGg9Jy4vd29ya2Zsb3ctbW9kZWxzLnRzJyAvPlxyXG4vLy88cmVmZXJlbmNlIHBhdGg9Jy4vd29ya2Zsb3ctY2FudmFzLnRzJyAvPlxyXG5cclxuY2xhc3MgV29ya2Zsb3dWaWV3ZXIgZXh0ZW5kcyBXb3JrZmxvd0NhbnZhcyB7XHJcbiAgICBwcml2YXRlIGpzUGx1bWJJbnN0YW5jZToganNQbHVtYkluc3RhbmNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBjb250YWluZXI6IEhUTUxFbGVtZW50LCBwcm90ZWN0ZWQgd29ya2Zsb3dUeXBlOiBXb3JrZmxvd3MuV29ya2Zsb3dUeXBlKSB7XHJcbiAgICAgICAgc3VwZXIoY29udGFpbmVyLCB3b3JrZmxvd1R5cGUpO1xyXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICBqc1BsdW1iLnJlYWR5KCgpID0+IHtcclxuICAgICAgICAgICAganNQbHVtYi5pbXBvcnREZWZhdWx0cyh0aGlzLmdldERlZmF1bHRzKCkpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcGx1bWJlciA9IHRoaXMuY3JlYXRlSnNQbHVtYkluc3RhbmNlKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBMaXN0ZW4gZm9yIG5ldyBjb25uZWN0aW9ucy5cclxuICAgICAgICAgICAgcGx1bWJlci5iaW5kKCdjb25uZWN0aW9uJywgZnVuY3Rpb24gKGNvbm5JbmZvLCBvcmlnaW5hbEV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb25uZWN0aW9uOiBDb25uZWN0aW9uID0gY29ubkluZm8uY29ubmVjdGlvbjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG91dGNvbWU6IFdvcmtmbG93cy5PdXRjb21lID0gY29ubmVjdGlvbi5nZXRQYXJhbWV0ZXJzKCkub3V0Y29tZTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBsYWJlbDogYW55ID0gY29ubmVjdGlvbi5nZXRPdmVybGF5KCdsYWJlbCcpO1xyXG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0TGFiZWwob3V0Y29tZS5kaXNwbGF5TmFtZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgbGV0IGFjdGl2aXR5RWxlbWVudHMgPSB0aGlzLmdldEFjdGl2aXR5RWxlbWVudHMoKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBhcmVFcXVhbE91dGNvbWVzID0gZnVuY3Rpb24gKG91dGNvbWVzMTogV29ya2Zsb3dzLk91dGNvbWVbXSwgb3V0Y29tZXMyOiBXb3JrZmxvd3MuT3V0Y29tZVtdKTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgICAgICBpZiAob3V0Y29tZXMxLmxlbmd0aCAhPSBvdXRjb21lczIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0Y29tZXMxLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3V0Y29tZTEgPSBvdXRjb21lczFbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3V0Y29tZTIgPSBvdXRjb21lczJbaV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvdXRjb21lMS5uYW1lICE9IG91dGNvbWUyLmRpc3BsYXlOYW1lIHx8IG91dGNvbWUxLmRpc3BsYXlOYW1lICE9IG91dGNvbWUyLmRpc3BsYXlOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFN1c3BlbmQgZHJhd2luZyBhbmQgaW5pdGlhbGl6ZS5cclxuICAgICAgICAgICAgcGx1bWJlci5iYXRjaCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB2YXIgd29ya2Zsb3dJZDogbnVtYmVyID0gdGhpcy53b3JrZmxvd1R5cGUuaWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgYWN0aXZpdHlFbGVtZW50cy5lYWNoKChpbmRleCwgYWN0aXZpdHlFbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgJGFjdGl2aXR5RWxlbWVudCA9ICQoYWN0aXZpdHlFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhY3Rpdml0eUlkID0gJGFjdGl2aXR5RWxlbWVudC5kYXRhKCdhY3Rpdml0eS1pZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2aXR5ID0gdGhpcy5nZXRBY3Rpdml0eShhY3Rpdml0eUlkKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQ29uZmlndXJlIHRoZSBhY3Rpdml0eSBhcyBhIHRhcmdldC5cclxuICAgICAgICAgICAgICAgICAgICBwbHVtYmVyLm1ha2VUYXJnZXQoYWN0aXZpdHlFbGVtZW50LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3BPcHRpb25zOiB7IGhvdmVyQ2xhc3M6ICdob3ZlcicgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yOiAnQ29udGludW91cycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZHBvaW50OiBbJ0JsYW5rJywgeyByYWRpdXM6IDggfV1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHNvdXJjZSBlbmRwb2ludHMuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgb3V0Y29tZSBvZiBhY3Rpdml0eS5vdXRjb21lcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2VFbmRwb2ludE9wdGlvbnMgPSB0aGlzLmdldFNvdXJjZUVuZHBvaW50T3B0aW9ucyhhY3Rpdml0eSwgb3V0Y29tZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsdW1iZXIuYWRkRW5kcG9pbnQoYWN0aXZpdHlFbGVtZW50LCB7IGNvbm5lY3Rvck92ZXJsYXlzOiBbWydMYWJlbCcsIHsgbGFiZWw6IG91dGNvbWUuZGlzcGxheU5hbWUsIGNzc0NsYXNzOiAnY29ubmVjdGlvbi1sYWJlbCcgfV1dIH0sIHNvdXJjZUVuZHBvaW50T3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQ29ubmVjdCBhY3Rpdml0aWVzLlxyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVDb25uZWN0aW9ucyhwbHVtYmVyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBSZS1xdWVyeSB0aGUgYWN0aXZpdHkgZWxlbWVudHMuXHJcbiAgICAgICAgICAgICAgICBhY3Rpdml0eUVsZW1lbnRzID0gdGhpcy5nZXRBY3Rpdml0eUVsZW1lbnRzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gTWFrZSBhbGwgYWN0aXZpdHkgZWxlbWVudHMgdmlzaWJsZS5cclxuICAgICAgICAgICAgICAgIGFjdGl2aXR5RWxlbWVudHMuc2hvdygpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQ2FudmFzSGVpZ2h0KCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5qc1BsdW1iSW5zdGFuY2UgPSBwbHVtYmVyO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBnZXRFbmRwb2ludENvbG9yID0gKGFjdGl2aXR5OiBXb3JrZmxvd3MuQWN0aXZpdHkpID0+IHtcclxuICAgICAgICByZXR1cm4gYWN0aXZpdHkuaXNCbG9ja2luZyA/ICcjN2FiMDJjJyA6IGFjdGl2aXR5LmlzRXZlbnQgPyAnIzNhOGFjZCcgOiAnIzdhYjAyYyc7XHJcbiAgICB9XHJcbn1cclxuXHJcbiQuZm4ud29ya2Zsb3dWaWV3ZXIgPSBmdW5jdGlvbiAodGhpczogSlF1ZXJ5KTogSlF1ZXJ5IHtcclxuICAgIHRoaXMuZWFjaCgoaW5kZXgsIGVsZW1lbnQpID0+IHtcclxuICAgICAgICB2YXIgJGVsZW1lbnQgPSAkKGVsZW1lbnQpO1xyXG4gICAgICAgIHZhciB3b3JrZmxvd1R5cGU6IFdvcmtmbG93cy5Xb3JrZmxvd1R5cGUgPSAkZWxlbWVudC5kYXRhKCd3b3JrZmxvdy10eXBlJyk7XHJcblxyXG4gICAgICAgICRlbGVtZW50LmRhdGEoJ3dvcmtmbG93Vmlld2VyJywgbmV3IFdvcmtmbG93Vmlld2VyKGVsZW1lbnQsIHdvcmtmbG93VHlwZSkpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XHJcbiAgICBjb25zdCB3b3JrZmxvd1ZpZXdlcjogV29ya2Zsb3dWaWV3ZXIgPSAkKCcud29ya2Zsb3ctY2FudmFzJykud29ya2Zsb3dWaWV3ZXIoKS5kYXRhKCd3b3JrZmxvd1ZpZXdlcicpO1xyXG59KTtcclxuIiwiLy8vPHJlZmVyZW5jZSBwYXRoPScuLi9MaWIvanF1ZXJ5L3R5cGluZ3MuZC50cycgLz5cbi8vLzxyZWZlcmVuY2UgcGF0aD0nLi4vTGliL2pzcGx1bWIvdHlwaW5ncy5kLnRzJyAvPlxuLy8vPHJlZmVyZW5jZSBwYXRoPScuL3dvcmtmbG93LW1vZGVscy50cycgLz5cbi8vLzxyZWZlcmVuY2UgcGF0aD0nLi93b3JrZmxvdy1jYW52YXMudHMnIC8+XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBXb3JrZmxvd1ZpZXdlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoV29ya2Zsb3dWaWV3ZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gV29ya2Zsb3dWaWV3ZXIoY29udGFpbmVyLCB3b3JrZmxvd1R5cGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY29udGFpbmVyLCB3b3JrZmxvd1R5cGUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgX3RoaXMud29ya2Zsb3dUeXBlID0gd29ya2Zsb3dUeXBlO1xuICAgICAgICBfdGhpcy5nZXRFbmRwb2ludENvbG9yID0gZnVuY3Rpb24gKGFjdGl2aXR5KSB7XG4gICAgICAgICAgICByZXR1cm4gYWN0aXZpdHkuaXNCbG9ja2luZyA/ICcjN2FiMDJjJyA6IGFjdGl2aXR5LmlzRXZlbnQgPyAnIzNhOGFjZCcgOiAnIzdhYjAyYyc7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBzZWxmID0gX3RoaXM7XG4gICAgICAgIGpzUGx1bWIucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAganNQbHVtYi5pbXBvcnREZWZhdWx0cyhfdGhpcy5nZXREZWZhdWx0cygpKTtcbiAgICAgICAgICAgIHZhciBwbHVtYmVyID0gX3RoaXMuY3JlYXRlSnNQbHVtYkluc3RhbmNlKCk7XG4gICAgICAgICAgICAvLyBMaXN0ZW4gZm9yIG5ldyBjb25uZWN0aW9ucy5cbiAgICAgICAgICAgIHBsdW1iZXIuYmluZCgnY29ubmVjdGlvbicsIGZ1bmN0aW9uIChjb25uSW5mbywgb3JpZ2luYWxFdmVudCkge1xuICAgICAgICAgICAgICAgIHZhciBjb25uZWN0aW9uID0gY29ubkluZm8uY29ubmVjdGlvbjtcbiAgICAgICAgICAgICAgICB2YXIgb3V0Y29tZSA9IGNvbm5lY3Rpb24uZ2V0UGFyYW1ldGVycygpLm91dGNvbWU7XG4gICAgICAgICAgICAgICAgdmFyIGxhYmVsID0gY29ubmVjdGlvbi5nZXRPdmVybGF5KCdsYWJlbCcpO1xuICAgICAgICAgICAgICAgIGxhYmVsLnNldExhYmVsKG91dGNvbWUuZGlzcGxheU5hbWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgYWN0aXZpdHlFbGVtZW50cyA9IF90aGlzLmdldEFjdGl2aXR5RWxlbWVudHMoKTtcbiAgICAgICAgICAgIHZhciBhcmVFcXVhbE91dGNvbWVzID0gZnVuY3Rpb24gKG91dGNvbWVzMSwgb3V0Y29tZXMyKSB7XG4gICAgICAgICAgICAgICAgaWYgKG91dGNvbWVzMS5sZW5ndGggIT0gb3V0Y29tZXMyLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3V0Y29tZXMxLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvdXRjb21lMSA9IG91dGNvbWVzMVtpXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG91dGNvbWUyID0gb3V0Y29tZXMyW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3V0Y29tZTEubmFtZSAhPSBvdXRjb21lMi5kaXNwbGF5TmFtZSB8fCBvdXRjb21lMS5kaXNwbGF5TmFtZSAhPSBvdXRjb21lMi5kaXNwbGF5TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIFN1c3BlbmQgZHJhd2luZyBhbmQgaW5pdGlhbGl6ZS5cbiAgICAgICAgICAgIHBsdW1iZXIuYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciB3b3JrZmxvd0lkID0gX3RoaXMud29ya2Zsb3dUeXBlLmlkO1xuICAgICAgICAgICAgICAgIGFjdGl2aXR5RWxlbWVudHMuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGFjdGl2aXR5RWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJGFjdGl2aXR5RWxlbWVudCA9ICQoYWN0aXZpdHlFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGl2aXR5SWQgPSAkYWN0aXZpdHlFbGVtZW50LmRhdGEoJ2FjdGl2aXR5LWlkJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3Rpdml0eSA9IF90aGlzLmdldEFjdGl2aXR5KGFjdGl2aXR5SWQpO1xuICAgICAgICAgICAgICAgICAgICAvLyBDb25maWd1cmUgdGhlIGFjdGl2aXR5IGFzIGEgdGFyZ2V0LlxuICAgICAgICAgICAgICAgICAgICBwbHVtYmVyLm1ha2VUYXJnZXQoYWN0aXZpdHlFbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkcm9wT3B0aW9uczogeyBob3ZlckNsYXNzOiAnaG92ZXInIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmNob3I6ICdDb250aW51b3VzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZHBvaW50OiBbJ0JsYW5rJywgeyByYWRpdXM6IDggfV1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCBzb3VyY2UgZW5kcG9pbnRzLlxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gYWN0aXZpdHkub3V0Y29tZXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3V0Y29tZSA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzb3VyY2VFbmRwb2ludE9wdGlvbnMgPSBfdGhpcy5nZXRTb3VyY2VFbmRwb2ludE9wdGlvbnMoYWN0aXZpdHksIG91dGNvbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGx1bWJlci5hZGRFbmRwb2ludChhY3Rpdml0eUVsZW1lbnQsIHsgY29ubmVjdG9yT3ZlcmxheXM6IFtbJ0xhYmVsJywgeyBsYWJlbDogb3V0Y29tZS5kaXNwbGF5TmFtZSwgY3NzQ2xhc3M6ICdjb25uZWN0aW9uLWxhYmVsJyB9XV0gfSwgc291cmNlRW5kcG9pbnRPcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vIENvbm5lY3QgYWN0aXZpdGllcy5cbiAgICAgICAgICAgICAgICBfdGhpcy51cGRhdGVDb25uZWN0aW9ucyhwbHVtYmVyKTtcbiAgICAgICAgICAgICAgICAvLyBSZS1xdWVyeSB0aGUgYWN0aXZpdHkgZWxlbWVudHMuXG4gICAgICAgICAgICAgICAgYWN0aXZpdHlFbGVtZW50cyA9IF90aGlzLmdldEFjdGl2aXR5RWxlbWVudHMoKTtcbiAgICAgICAgICAgICAgICAvLyBNYWtlIGFsbCBhY3Rpdml0eSBlbGVtZW50cyB2aXNpYmxlLlxuICAgICAgICAgICAgICAgIGFjdGl2aXR5RWxlbWVudHMuc2hvdygpO1xuICAgICAgICAgICAgICAgIF90aGlzLnVwZGF0ZUNhbnZhc0hlaWdodCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfdGhpcy5qc1BsdW1iSW5zdGFuY2UgPSBwbHVtYmVyO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gV29ya2Zsb3dWaWV3ZXI7XG59KFdvcmtmbG93Q2FudmFzKSk7XG4kLmZuLndvcmtmbG93Vmlld2VyID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgdmFyICRlbGVtZW50ID0gJChlbGVtZW50KTtcbiAgICAgICAgdmFyIHdvcmtmbG93VHlwZSA9ICRlbGVtZW50LmRhdGEoJ3dvcmtmbG93LXR5cGUnKTtcbiAgICAgICAgJGVsZW1lbnQuZGF0YSgnd29ya2Zsb3dWaWV3ZXInLCBuZXcgV29ya2Zsb3dWaWV3ZXIoZWxlbWVudCwgd29ya2Zsb3dUeXBlKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgIHZhciB3b3JrZmxvd1ZpZXdlciA9ICQoJy53b3JrZmxvdy1jYW52YXMnKS53b3JrZmxvd1ZpZXdlcigpLmRhdGEoJ3dvcmtmbG93Vmlld2VyJyk7XG59KTtcbiJdfQ==
